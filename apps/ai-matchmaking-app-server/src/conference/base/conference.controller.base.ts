/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConferenceService } from "../conference.service";
import { ConferenceCreateInput } from "./ConferenceCreateInput";
import { Conference } from "./Conference";
import { ConferenceFindManyArgs } from "./ConferenceFindManyArgs";
import { ConferenceWhereUniqueInput } from "./ConferenceWhereUniqueInput";
import { ConferenceUpdateInput } from "./ConferenceUpdateInput";
import { ActivityFindManyArgs } from "../../activity/base/ActivityFindManyArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivityWhereUniqueInput } from "../../activity/base/ActivityWhereUniqueInput";
import { SpeakerFindManyArgs } from "../../speaker/base/SpeakerFindManyArgs";
import { Speaker } from "../../speaker/base/Speaker";
import { SpeakerWhereUniqueInput } from "../../speaker/base/SpeakerWhereUniqueInput";

export class ConferenceControllerBase {
  constructor(protected readonly service: ConferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Conference })
  async createConference(
    @common.Body() data: ConferenceCreateInput
  ): Promise<Conference> {
    return await this.service.createConference({
      data: data,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Conference] })
  @ApiNestedQuery(ConferenceFindManyArgs)
  async conferences(@common.Req() request: Request): Promise<Conference[]> {
    const args = plainToClass(ConferenceFindManyArgs, request.query);
    return this.service.conferences({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Conference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conference(
    @common.Param() params: ConferenceWhereUniqueInput
  ): Promise<Conference | null> {
    const result = await this.service.conference({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Conference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConference(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() data: ConferenceUpdateInput
  ): Promise<Conference | null> {
    try {
      return await this.service.updateConference({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Conference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConference(
    @common.Param() params: ConferenceWhereUniqueInput
  ): Promise<Conference | null> {
    try {
      return await this.service.deleteConference({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activities")
  @ApiNestedQuery(ActivityFindManyArgs)
  async findActivities(
    @common.Req() request: Request,
    @common.Param() params: ConferenceWhereUniqueInput
  ): Promise<Activity[]> {
    const query = plainToClass(ActivityFindManyArgs, request.query);
    const results = await this.service.findActivities(params.id, {
      ...query,
      select: {
        conference: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activities")
  async connectActivities(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        connect: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activities")
  async updateActivities(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        set: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activities")
  async disconnectActivities(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: ActivityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activities: {
        disconnect: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/speakers")
  @ApiNestedQuery(SpeakerFindManyArgs)
  async findSpeakers(
    @common.Req() request: Request,
    @common.Param() params: ConferenceWhereUniqueInput
  ): Promise<Speaker[]> {
    const query = plainToClass(SpeakerFindManyArgs, request.query);
    const results = await this.service.findSpeakers(params.id, {
      ...query,
      select: {
        bio: true,

        conference: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/speakers")
  async connectSpeakers(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: SpeakerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      speakers: {
        connect: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/speakers")
  async updateSpeakers(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: SpeakerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      speakers: {
        set: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/speakers")
  async disconnectSpeakers(
    @common.Param() params: ConferenceWhereUniqueInput,
    @common.Body() body: SpeakerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      speakers: {
        disconnect: body,
      },
    };
    await this.service.updateConference({
      where: params,
      data,
      select: { id: true },
    });
  }
}
