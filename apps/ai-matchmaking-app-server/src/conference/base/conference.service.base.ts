/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Conference as PrismaConference,
  Activity as PrismaActivity,
  Speaker as PrismaSpeaker,
} from "@prisma/client";

export class ConferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conference.count(args);
  }

  async conferences<T extends Prisma.ConferenceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConferenceFindManyArgs>
  ): Promise<PrismaConference[]> {
    return this.prisma.conference.findMany<Prisma.ConferenceFindManyArgs>(args);
  }
  async conference<T extends Prisma.ConferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConferenceFindUniqueArgs>
  ): Promise<PrismaConference | null> {
    return this.prisma.conference.findUnique(args);
  }
  async createConference<T extends Prisma.ConferenceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConferenceCreateArgs>
  ): Promise<PrismaConference> {
    return this.prisma.conference.create<T>(args);
  }
  async updateConference<T extends Prisma.ConferenceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConferenceUpdateArgs>
  ): Promise<PrismaConference> {
    return this.prisma.conference.update<T>(args);
  }
  async deleteConference<T extends Prisma.ConferenceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConferenceDeleteArgs>
  ): Promise<PrismaConference> {
    return this.prisma.conference.delete(args);
  }

  async findActivities(
    parentId: string,
    args: Prisma.ActivityFindManyArgs
  ): Promise<PrismaActivity[]> {
    return this.prisma.conference
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .activities(args);
  }

  async findSpeakers(
    parentId: string,
    args: Prisma.SpeakerFindManyArgs
  ): Promise<PrismaSpeaker[]> {
    return this.prisma.conference
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .speakers(args);
  }
}
