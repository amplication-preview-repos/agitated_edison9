/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParticipantSummaryService } from "../participantSummary.service";
import { ParticipantSummaryCreateInput } from "./ParticipantSummaryCreateInput";
import { ParticipantSummary } from "./ParticipantSummary";
import { ParticipantSummaryFindManyArgs } from "./ParticipantSummaryFindManyArgs";
import { ParticipantSummaryWhereUniqueInput } from "./ParticipantSummaryWhereUniqueInput";
import { ParticipantSummaryUpdateInput } from "./ParticipantSummaryUpdateInput";

export class ParticipantSummaryControllerBase {
  constructor(protected readonly service: ParticipantSummaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParticipantSummary })
  async createParticipantSummary(
    @common.Body() data: ParticipantSummaryCreateInput
  ): Promise<ParticipantSummary> {
    return await this.service.createParticipantSummary({
      data: {
        ...data,

        participant: data.participant
          ? {
              connect: data.participant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        participant: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParticipantSummary] })
  @ApiNestedQuery(ParticipantSummaryFindManyArgs)
  async participantSummaries(
    @common.Req() request: Request
  ): Promise<ParticipantSummary[]> {
    const args = plainToClass(ParticipantSummaryFindManyArgs, request.query);
    return this.service.participantSummaries({
      ...args,
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        participant: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParticipantSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async participantSummary(
    @common.Param() params: ParticipantSummaryWhereUniqueInput
  ): Promise<ParticipantSummary | null> {
    const result = await this.service.participantSummary({
      where: params,
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        participant: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParticipantSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParticipantSummary(
    @common.Param() params: ParticipantSummaryWhereUniqueInput,
    @common.Body() data: ParticipantSummaryUpdateInput
  ): Promise<ParticipantSummary | null> {
    try {
      return await this.service.updateParticipantSummary({
        where: params,
        data: {
          ...data,

          participant: data.participant
            ? {
                connect: data.participant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          embeddings: true,
          id: true,

          participant: {
            select: {
              id: true,
            },
          },

          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParticipantSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParticipantSummary(
    @common.Param() params: ParticipantSummaryWhereUniqueInput
  ): Promise<ParticipantSummary | null> {
    try {
      return await this.service.deleteParticipantSummary({
        where: params,
        select: {
          createdAt: true,
          embeddings: true,
          id: true,

          participant: {
            select: {
              id: true,
            },
          },

          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
