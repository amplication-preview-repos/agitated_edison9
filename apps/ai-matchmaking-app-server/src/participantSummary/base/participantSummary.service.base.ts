/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ParticipantSummary as PrismaParticipantSummary,
  Participant as PrismaParticipant,
} from "@prisma/client";

export class ParticipantSummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParticipantSummaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.participantSummary.count(args);
  }

  async participantSummaries<T extends Prisma.ParticipantSummaryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantSummaryFindManyArgs>
  ): Promise<PrismaParticipantSummary[]> {
    return this.prisma.participantSummary.findMany<Prisma.ParticipantSummaryFindManyArgs>(
      args
    );
  }
  async participantSummary<T extends Prisma.ParticipantSummaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantSummaryFindUniqueArgs>
  ): Promise<PrismaParticipantSummary | null> {
    return this.prisma.participantSummary.findUnique(args);
  }
  async createParticipantSummary<T extends Prisma.ParticipantSummaryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantSummaryCreateArgs>
  ): Promise<PrismaParticipantSummary> {
    return this.prisma.participantSummary.create<T>(args);
  }
  async updateParticipantSummary<T extends Prisma.ParticipantSummaryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantSummaryUpdateArgs>
  ): Promise<PrismaParticipantSummary> {
    return this.prisma.participantSummary.update<T>(args);
  }
  async deleteParticipantSummary<T extends Prisma.ParticipantSummaryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParticipantSummaryDeleteArgs>
  ): Promise<PrismaParticipantSummary> {
    return this.prisma.participantSummary.delete(args);
  }

  async getParticipant(parentId: string): Promise<PrismaParticipant | null> {
    return this.prisma.participantSummary
      .findUnique({
        where: { id: parentId },
      })
      .participant();
  }
}
