/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ParticipantSummary } from "./ParticipantSummary";
import { ParticipantSummaryCountArgs } from "./ParticipantSummaryCountArgs";
import { ParticipantSummaryFindManyArgs } from "./ParticipantSummaryFindManyArgs";
import { ParticipantSummaryFindUniqueArgs } from "./ParticipantSummaryFindUniqueArgs";
import { CreateParticipantSummaryArgs } from "./CreateParticipantSummaryArgs";
import { UpdateParticipantSummaryArgs } from "./UpdateParticipantSummaryArgs";
import { DeleteParticipantSummaryArgs } from "./DeleteParticipantSummaryArgs";
import { Participant } from "../../participant/base/Participant";
import { ParticipantSummaryService } from "../participantSummary.service";
@graphql.Resolver(() => ParticipantSummary)
export class ParticipantSummaryResolverBase {
  constructor(protected readonly service: ParticipantSummaryService) {}

  async _participantSummariesMeta(
    @graphql.Args() args: ParticipantSummaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ParticipantSummary])
  async participantSummaries(
    @graphql.Args() args: ParticipantSummaryFindManyArgs
  ): Promise<ParticipantSummary[]> {
    return this.service.participantSummaries(args);
  }

  @graphql.Query(() => ParticipantSummary, { nullable: true })
  async participantSummary(
    @graphql.Args() args: ParticipantSummaryFindUniqueArgs
  ): Promise<ParticipantSummary | null> {
    const result = await this.service.participantSummary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ParticipantSummary)
  async createParticipantSummary(
    @graphql.Args() args: CreateParticipantSummaryArgs
  ): Promise<ParticipantSummary> {
    return await this.service.createParticipantSummary({
      ...args,
      data: {
        ...args.data,

        participant: args.data.participant
          ? {
              connect: args.data.participant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ParticipantSummary)
  async updateParticipantSummary(
    @graphql.Args() args: UpdateParticipantSummaryArgs
  ): Promise<ParticipantSummary | null> {
    try {
      return await this.service.updateParticipantSummary({
        ...args,
        data: {
          ...args.data,

          participant: args.data.participant
            ? {
                connect: args.data.participant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParticipantSummary)
  async deleteParticipantSummary(
    @graphql.Args() args: DeleteParticipantSummaryArgs
  ): Promise<ParticipantSummary | null> {
    try {
      return await this.service.deleteParticipantSummary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Participant, {
    nullable: true,
    name: "participant",
  })
  async getParticipant(
    @graphql.Parent() parent: ParticipantSummary
  ): Promise<Participant | null> {
    const result = await this.service.getParticipant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
