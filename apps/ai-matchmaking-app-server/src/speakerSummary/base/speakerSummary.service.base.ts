/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SpeakerSummary as PrismaSpeakerSummary,
  Speaker as PrismaSpeaker,
} from "@prisma/client";

export class SpeakerSummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpeakerSummaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.speakerSummary.count(args);
  }

  async speakerSummaries<T extends Prisma.SpeakerSummaryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerSummaryFindManyArgs>
  ): Promise<PrismaSpeakerSummary[]> {
    return this.prisma.speakerSummary.findMany<Prisma.SpeakerSummaryFindManyArgs>(
      args
    );
  }
  async speakerSummary<T extends Prisma.SpeakerSummaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerSummaryFindUniqueArgs>
  ): Promise<PrismaSpeakerSummary | null> {
    return this.prisma.speakerSummary.findUnique(args);
  }
  async createSpeakerSummary<T extends Prisma.SpeakerSummaryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerSummaryCreateArgs>
  ): Promise<PrismaSpeakerSummary> {
    return this.prisma.speakerSummary.create<T>(args);
  }
  async updateSpeakerSummary<T extends Prisma.SpeakerSummaryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerSummaryUpdateArgs>
  ): Promise<PrismaSpeakerSummary> {
    return this.prisma.speakerSummary.update<T>(args);
  }
  async deleteSpeakerSummary<T extends Prisma.SpeakerSummaryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerSummaryDeleteArgs>
  ): Promise<PrismaSpeakerSummary> {
    return this.prisma.speakerSummary.delete(args);
  }

  async getSpeaker(parentId: string): Promise<PrismaSpeaker | null> {
    return this.prisma.speakerSummary
      .findUnique({
        where: { id: parentId },
      })
      .speaker();
  }
}
