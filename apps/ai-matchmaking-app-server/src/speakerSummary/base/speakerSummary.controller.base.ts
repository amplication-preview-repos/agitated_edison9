/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpeakerSummaryService } from "../speakerSummary.service";
import { SpeakerSummaryCreateInput } from "./SpeakerSummaryCreateInput";
import { SpeakerSummary } from "./SpeakerSummary";
import { SpeakerSummaryFindManyArgs } from "./SpeakerSummaryFindManyArgs";
import { SpeakerSummaryWhereUniqueInput } from "./SpeakerSummaryWhereUniqueInput";
import { SpeakerSummaryUpdateInput } from "./SpeakerSummaryUpdateInput";

export class SpeakerSummaryControllerBase {
  constructor(protected readonly service: SpeakerSummaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpeakerSummary })
  async createSpeakerSummary(
    @common.Body() data: SpeakerSummaryCreateInput
  ): Promise<SpeakerSummary> {
    return await this.service.createSpeakerSummary({
      data: {
        ...data,

        speaker: data.speaker
          ? {
              connect: data.speaker,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        speaker: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SpeakerSummary] })
  @ApiNestedQuery(SpeakerSummaryFindManyArgs)
  async speakerSummaries(
    @common.Req() request: Request
  ): Promise<SpeakerSummary[]> {
    const args = plainToClass(SpeakerSummaryFindManyArgs, request.query);
    return this.service.speakerSummaries({
      ...args,
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        speaker: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpeakerSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async speakerSummary(
    @common.Param() params: SpeakerSummaryWhereUniqueInput
  ): Promise<SpeakerSummary | null> {
    const result = await this.service.speakerSummary({
      where: params,
      select: {
        createdAt: true,
        embeddings: true,
        id: true,

        speaker: {
          select: {
            id: true,
          },
        },

        summary: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpeakerSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpeakerSummary(
    @common.Param() params: SpeakerSummaryWhereUniqueInput,
    @common.Body() data: SpeakerSummaryUpdateInput
  ): Promise<SpeakerSummary | null> {
    try {
      return await this.service.updateSpeakerSummary({
        where: params,
        data: {
          ...data,

          speaker: data.speaker
            ? {
                connect: data.speaker,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          embeddings: true,
          id: true,

          speaker: {
            select: {
              id: true,
            },
          },

          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpeakerSummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpeakerSummary(
    @common.Param() params: SpeakerSummaryWhereUniqueInput
  ): Promise<SpeakerSummary | null> {
    try {
      return await this.service.deleteSpeakerSummary({
        where: params,
        select: {
          createdAt: true,
          embeddings: true,
          id: true,

          speaker: {
            select: {
              id: true,
            },
          },

          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
