/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActivitySummary } from "./ActivitySummary";
import { ActivitySummaryCountArgs } from "./ActivitySummaryCountArgs";
import { ActivitySummaryFindManyArgs } from "./ActivitySummaryFindManyArgs";
import { ActivitySummaryFindUniqueArgs } from "./ActivitySummaryFindUniqueArgs";
import { CreateActivitySummaryArgs } from "./CreateActivitySummaryArgs";
import { UpdateActivitySummaryArgs } from "./UpdateActivitySummaryArgs";
import { DeleteActivitySummaryArgs } from "./DeleteActivitySummaryArgs";
import { Activity } from "../../activity/base/Activity";
import { ActivitySummaryService } from "../activitySummary.service";
@graphql.Resolver(() => ActivitySummary)
export class ActivitySummaryResolverBase {
  constructor(protected readonly service: ActivitySummaryService) {}

  async _activitySummariesMeta(
    @graphql.Args() args: ActivitySummaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActivitySummary])
  async activitySummaries(
    @graphql.Args() args: ActivitySummaryFindManyArgs
  ): Promise<ActivitySummary[]> {
    return this.service.activitySummaries(args);
  }

  @graphql.Query(() => ActivitySummary, { nullable: true })
  async activitySummary(
    @graphql.Args() args: ActivitySummaryFindUniqueArgs
  ): Promise<ActivitySummary | null> {
    const result = await this.service.activitySummary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActivitySummary)
  async createActivitySummary(
    @graphql.Args() args: CreateActivitySummaryArgs
  ): Promise<ActivitySummary> {
    return await this.service.createActivitySummary({
      ...args,
      data: {
        ...args.data,

        activity: args.data.activity
          ? {
              connect: args.data.activity,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ActivitySummary)
  async updateActivitySummary(
    @graphql.Args() args: UpdateActivitySummaryArgs
  ): Promise<ActivitySummary | null> {
    try {
      return await this.service.updateActivitySummary({
        ...args,
        data: {
          ...args.data,

          activity: args.data.activity
            ? {
                connect: args.data.activity,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActivitySummary)
  async deleteActivitySummary(
    @graphql.Args() args: DeleteActivitySummaryArgs
  ): Promise<ActivitySummary | null> {
    try {
      return await this.service.deleteActivitySummary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Activity, {
    nullable: true,
    name: "activity",
  })
  async getActivity(
    @graphql.Parent() parent: ActivitySummary
  ): Promise<Activity | null> {
    const result = await this.service.getActivity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
