/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActivitySummaryService } from "../activitySummary.service";
import { ActivitySummaryCreateInput } from "./ActivitySummaryCreateInput";
import { ActivitySummary } from "./ActivitySummary";
import { ActivitySummaryFindManyArgs } from "./ActivitySummaryFindManyArgs";
import { ActivitySummaryWhereUniqueInput } from "./ActivitySummaryWhereUniqueInput";
import { ActivitySummaryUpdateInput } from "./ActivitySummaryUpdateInput";

export class ActivitySummaryControllerBase {
  constructor(protected readonly service: ActivitySummaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActivitySummary })
  async createActivitySummary(
    @common.Body() data: ActivitySummaryCreateInput
  ): Promise<ActivitySummary> {
    return await this.service.createActivitySummary({
      data: {
        ...data,

        activity: data.activity
          ? {
              connect: data.activity,
            }
          : undefined,
      },
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        embeddings: true,
        id: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActivitySummary] })
  @ApiNestedQuery(ActivitySummaryFindManyArgs)
  async activitySummaries(
    @common.Req() request: Request
  ): Promise<ActivitySummary[]> {
    const args = plainToClass(ActivitySummaryFindManyArgs, request.query);
    return this.service.activitySummaries({
      ...args,
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        embeddings: true,
        id: true,
        summary: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActivitySummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async activitySummary(
    @common.Param() params: ActivitySummaryWhereUniqueInput
  ): Promise<ActivitySummary | null> {
    const result = await this.service.activitySummary({
      where: params,
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        embeddings: true,
        id: true,
        summary: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActivitySummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActivitySummary(
    @common.Param() params: ActivitySummaryWhereUniqueInput,
    @common.Body() data: ActivitySummaryUpdateInput
  ): Promise<ActivitySummary | null> {
    try {
      return await this.service.updateActivitySummary({
        where: params,
        data: {
          ...data,

          activity: data.activity
            ? {
                connect: data.activity,
              }
            : undefined,
        },
        select: {
          activity: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          embeddings: true,
          id: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActivitySummary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActivitySummary(
    @common.Param() params: ActivitySummaryWhereUniqueInput
  ): Promise<ActivitySummary | null> {
    try {
      return await this.service.deleteActivitySummary({
        where: params,
        select: {
          activity: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          embeddings: true,
          id: true,
          summary: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
