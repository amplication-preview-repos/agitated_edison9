/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ActivitySummary as PrismaActivitySummary,
  Activity as PrismaActivity,
} from "@prisma/client";

export class ActivitySummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ActivitySummaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.activitySummary.count(args);
  }

  async activitySummaries<T extends Prisma.ActivitySummaryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivitySummaryFindManyArgs>
  ): Promise<PrismaActivitySummary[]> {
    return this.prisma.activitySummary.findMany<Prisma.ActivitySummaryFindManyArgs>(
      args
    );
  }
  async activitySummary<T extends Prisma.ActivitySummaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivitySummaryFindUniqueArgs>
  ): Promise<PrismaActivitySummary | null> {
    return this.prisma.activitySummary.findUnique(args);
  }
  async createActivitySummary<T extends Prisma.ActivitySummaryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivitySummaryCreateArgs>
  ): Promise<PrismaActivitySummary> {
    return this.prisma.activitySummary.create<T>(args);
  }
  async updateActivitySummary<T extends Prisma.ActivitySummaryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivitySummaryUpdateArgs>
  ): Promise<PrismaActivitySummary> {
    return this.prisma.activitySummary.update<T>(args);
  }
  async deleteActivitySummary<T extends Prisma.ActivitySummaryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActivitySummaryDeleteArgs>
  ): Promise<PrismaActivitySummary> {
    return this.prisma.activitySummary.delete(args);
  }

  async getActivity(parentId: string): Promise<PrismaActivity | null> {
    return this.prisma.activitySummary
      .findUnique({
        where: { id: parentId },
      })
      .activity();
  }
}
