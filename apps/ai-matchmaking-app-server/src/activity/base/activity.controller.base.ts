/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActivityService } from "../activity.service";
import { ActivityCreateInput } from "./ActivityCreateInput";
import { Activity } from "./Activity";
import { ActivityFindManyArgs } from "./ActivityFindManyArgs";
import { ActivityWhereUniqueInput } from "./ActivityWhereUniqueInput";
import { ActivityUpdateInput } from "./ActivityUpdateInput";
import { ActivitySummaryFindManyArgs } from "../../activitySummary/base/ActivitySummaryFindManyArgs";
import { ActivitySummary } from "../../activitySummary/base/ActivitySummary";
import { ActivitySummaryWhereUniqueInput } from "../../activitySummary/base/ActivitySummaryWhereUniqueInput";

export class ActivityControllerBase {
  constructor(protected readonly service: ActivityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Activity })
  async createActivity(
    @common.Body() data: ActivityCreateInput
  ): Promise<Activity> {
    return await this.service.createActivity({
      data: {
        ...data,

        conference: data.conference
          ? {
              connect: data.conference,
            }
          : undefined,
      },
      select: {
        conference: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Activity] })
  @ApiNestedQuery(ActivityFindManyArgs)
  async activities(@common.Req() request: Request): Promise<Activity[]> {
    const args = plainToClass(ActivityFindManyArgs, request.query);
    return this.service.activities({
      ...args,
      select: {
        conference: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async activity(
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<Activity | null> {
    const result = await this.service.activity({
      where: params,
      select: {
        conference: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActivity(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() data: ActivityUpdateInput
  ): Promise<Activity | null> {
    try {
      return await this.service.updateActivity({
        where: params,
        data: {
          ...data,

          conference: data.conference
            ? {
                connect: data.conference,
              }
            : undefined,
        },
        select: {
          conference: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Activity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActivity(
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<Activity | null> {
    try {
      return await this.service.deleteActivity({
        where: params,
        select: {
          conference: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/activitySummaries")
  @ApiNestedQuery(ActivitySummaryFindManyArgs)
  async findActivitySummaries(
    @common.Req() request: Request,
    @common.Param() params: ActivityWhereUniqueInput
  ): Promise<ActivitySummary[]> {
    const query = plainToClass(ActivitySummaryFindManyArgs, request.query);
    const results = await this.service.findActivitySummaries(params.id, {
      ...query,
      select: {
        activity: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        embeddings: true,
        id: true,
        summary: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/activitySummaries")
  async connectActivitySummaries(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: ActivitySummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activitySummaries: {
        connect: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/activitySummaries")
  async updateActivitySummaries(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: ActivitySummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activitySummaries: {
        set: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/activitySummaries")
  async disconnectActivitySummaries(
    @common.Param() params: ActivityWhereUniqueInput,
    @common.Body() body: ActivitySummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      activitySummaries: {
        disconnect: body,
      },
    };
    await this.service.updateActivity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
