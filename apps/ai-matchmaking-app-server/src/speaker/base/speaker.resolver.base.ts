/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Speaker } from "./Speaker";
import { SpeakerCountArgs } from "./SpeakerCountArgs";
import { SpeakerFindManyArgs } from "./SpeakerFindManyArgs";
import { SpeakerFindUniqueArgs } from "./SpeakerFindUniqueArgs";
import { CreateSpeakerArgs } from "./CreateSpeakerArgs";
import { UpdateSpeakerArgs } from "./UpdateSpeakerArgs";
import { DeleteSpeakerArgs } from "./DeleteSpeakerArgs";
import { SpeakerSummaryFindManyArgs } from "../../speakerSummary/base/SpeakerSummaryFindManyArgs";
import { SpeakerSummary } from "../../speakerSummary/base/SpeakerSummary";
import { Conference } from "../../conference/base/Conference";
import { SpeakerService } from "../speaker.service";
@graphql.Resolver(() => Speaker)
export class SpeakerResolverBase {
  constructor(protected readonly service: SpeakerService) {}

  async _speakersMeta(
    @graphql.Args() args: SpeakerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Speaker])
  async speakers(
    @graphql.Args() args: SpeakerFindManyArgs
  ): Promise<Speaker[]> {
    return this.service.speakers(args);
  }

  @graphql.Query(() => Speaker, { nullable: true })
  async speaker(
    @graphql.Args() args: SpeakerFindUniqueArgs
  ): Promise<Speaker | null> {
    const result = await this.service.speaker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Speaker)
  async createSpeaker(
    @graphql.Args() args: CreateSpeakerArgs
  ): Promise<Speaker> {
    return await this.service.createSpeaker({
      ...args,
      data: {
        ...args.data,

        conference: args.data.conference
          ? {
              connect: args.data.conference,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Speaker)
  async updateSpeaker(
    @graphql.Args() args: UpdateSpeakerArgs
  ): Promise<Speaker | null> {
    try {
      return await this.service.updateSpeaker({
        ...args,
        data: {
          ...args.data,

          conference: args.data.conference
            ? {
                connect: args.data.conference,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Speaker)
  async deleteSpeaker(
    @graphql.Args() args: DeleteSpeakerArgs
  ): Promise<Speaker | null> {
    try {
      return await this.service.deleteSpeaker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SpeakerSummary], { name: "speakerSummaries" })
  async findSpeakerSummaries(
    @graphql.Parent() parent: Speaker,
    @graphql.Args() args: SpeakerSummaryFindManyArgs
  ): Promise<SpeakerSummary[]> {
    const results = await this.service.findSpeakerSummaries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Conference, {
    nullable: true,
    name: "conference",
  })
  async getConference(
    @graphql.Parent() parent: Speaker
  ): Promise<Conference | null> {
    const result = await this.service.getConference(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
