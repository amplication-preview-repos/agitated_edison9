/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Speaker as PrismaSpeaker,
  SpeakerSummary as PrismaSpeakerSummary,
  Conference as PrismaConference,
} from "@prisma/client";

export class SpeakerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SpeakerCountArgs, "select">): Promise<number> {
    return this.prisma.speaker.count(args);
  }

  async speakers<T extends Prisma.SpeakerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerFindManyArgs>
  ): Promise<PrismaSpeaker[]> {
    return this.prisma.speaker.findMany<Prisma.SpeakerFindManyArgs>(args);
  }
  async speaker<T extends Prisma.SpeakerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerFindUniqueArgs>
  ): Promise<PrismaSpeaker | null> {
    return this.prisma.speaker.findUnique(args);
  }
  async createSpeaker<T extends Prisma.SpeakerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerCreateArgs>
  ): Promise<PrismaSpeaker> {
    return this.prisma.speaker.create<T>(args);
  }
  async updateSpeaker<T extends Prisma.SpeakerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerUpdateArgs>
  ): Promise<PrismaSpeaker> {
    return this.prisma.speaker.update<T>(args);
  }
  async deleteSpeaker<T extends Prisma.SpeakerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SpeakerDeleteArgs>
  ): Promise<PrismaSpeaker> {
    return this.prisma.speaker.delete(args);
  }

  async findSpeakerSummaries(
    parentId: string,
    args: Prisma.SpeakerSummaryFindManyArgs
  ): Promise<PrismaSpeakerSummary[]> {
    return this.prisma.speaker
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .speakerSummaries(args);
  }

  async getConference(parentId: string): Promise<PrismaConference | null> {
    return this.prisma.speaker
      .findUnique({
        where: { id: parentId },
      })
      .conference();
  }
}
